#!/usr/bin/python

from Control.Kalman_Filter import KalmanFilter as kf
from Control.Extended_Kalman_Filter import ExtendedKalmanFilter as ekf

from sympy import *

#from Control import KF_Plot as kf_plot
import numpy as np
import rospy, time
import matplotlib.pyplot as plt
import matplotlib.animation as animation

class example(object):

    def __init__(self):

	# Initializes the node
	rospy.init_node("example", anonymous=True)
	self.sample_time = rospy.get_param("simulation/sample_time") # rate at which this node runs
        self.node = rospy.Rate(self.sample_time) # wait function to use inside threads
	rho,phi,theta = symbols('rho phi theta') # states, also necessary to define the inputs
	self.states_names = Matrix([rho,phi,theta])
	self.model = Matrix([rho*cos(phi), rho*sin(phi), rho**2*theta])

        dt = 1.0/60
	#F = np.array([[1, dt, 0], [0, 1, dt], [0, 0, 1]])
	x0 = [0,0,0]
	P0 = [0,0,0]
	H = np.array([1, 0, 0]).reshape(1, 3)
	Q = np.array([[0.05, 0.05, 0.0], [0.05, 0.05, 0.0], [0.0, 0.0, 0.0]])
	R = np.array([0.5]).reshape(1, 1)

	x = np.linspace(-10, 10, 100)
	measurements = - (x**2 + 2*x - 2)  + np.random.normal(0, 2, 100)

	self.fig = plt.figure()
	self.ax1 = self.fig.add_subplot(1,1,1)

	#self.KF= kf(F = F, B = 0, H = H, Q = Q, R = R, initial_state = x0, initial_prediction = P0)
	self.EKF= ekf(self.model,self.states_names, H, 3, 1, B = 0, Q = Q, R = R, initial_state = x0, initial_prediction = P0)
	#predictions = []
	predictions_EKF = []
	true_values = []
	read = []
	self.t = []
	self.ts = 0
	for z in measurements:

		#preds, dummy = self.KF.estimate(z,0)
	        preds_EKF,dummy = self.EKF.estimate(z,0)
		#predictions.append(preds)
		predictions_EKF.append(preds_EKF)
		read.append(z)
		self.ts = self.ts + 0.1
    		self.t.append(self.ts)
		
		ani = animation.FuncAnimation(self.fig, self.animate, fargs=(read, predictions_EKF), interval=1000)

	plt.show()
	plt.legend()



    def animate(self,i, meas, preds):
	
        self.ax1.clear()
        self.ax1.plot(self.t, meas, label = 'Measurements')
	self.ax1.plot(self.t, preds, label = 'Kalman Filter Prediction')
	
	
	#plt.pause(1)



if __name__ == '__main__':
    example()
